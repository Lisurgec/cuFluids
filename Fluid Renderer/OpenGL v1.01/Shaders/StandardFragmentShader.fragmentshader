#version 330 core

in vec2 UV;
in vec3 Position_worldspace;
in vec3 Normal_cameraspace;
in vec3 EyeDirection_cameraspace;
in vec3 LightDirection_cameraspace;

out vec3 color;

//Values that are constant for the whole mesh
uniform sampler2D myTextureSampler;
uniform mat4 MV;
uniform vec3 LightPosition_worldspace;

void main(){

	//Light emission properties
	vec3 LightColor = vec3(1,1,1);
	float LightPower = 50.0f;

	//MaterialProperties
	vec3 MaterialDiffuseColor = texture2D(myTextureSampler, UV).rgb;
	vec3 MaterialAmbientColor = vec3(0.1,0.1,0.1) * MaterialDiffuseColor;
	
	float distance = length(LightPosition_worldspace - Position_worldspace);

	//Normal of the computed fragment, in camera sapce
	vec3 n = normalize(Normal_camerspace);
	//Direction of the light from the fragment to the light
	vec3 l = normalize(LightDirection_cameraspace);

	//Cosine of the angle between the normal and the light direction, clamped 0

	float cosTheta = clamp (dot(n,1), 0, 1);

	//Eye vector towards the camera
	vec3 E = normalize(EyeDirection_cameraspace);
	//Direction in which the triangle reflects the light

	vec3 R = reflect(-l, n);

	float cosAlpha = clamp(dot (E, R), 0, 1);

	color = 
		MaterialAmbientColor + 
		MaterialDiffuseColor * LightColor * LightPower * cosTheta / (distance * distance);



}